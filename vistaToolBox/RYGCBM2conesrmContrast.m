function [lmsrmContrast, lmsrmBack] = RYGCBM2conesrmContrast(display,stimRYGCBM,backRYGCBM,sensors,backgroundSPD)% %   [lmsrmContrast, lmsrmBack] = RYGCBM2conesrmContrast(display,stimRYGCBM,[backRYGCBM],[sensors])%   % This m-file is just modified version of 'RGB2ConeContrast.m' to expand% color dimention and number of primaries. %% PURPOSE:% %   Compute the vector of cone contrasts (yes, real contrasts)%   when using stimRYGCBM and backRYGCBM.  The structures (display,%   backRYGCBM, and stimRYGCBM) define the characteristics of the%   display, background and contrast stimulus.  The sensors%   default to the Stockman sensors. % % ARGUMENTS:%   %   display:  .spectra    display primaries (361x3)%   stimRYGCBM:  .dir  (color direction) and .scale (vector)%   backRYGCBM:  .dir  (color direction) and .scale (scalar) - RGB direction.  Default [0.5 0.5 0.5]%   sensors:  (optional) matrix 361x3 of sensor sensitivities.%             Default Stockman.%   %   lmsContrast:  The vector of cone contrasts under these conditions%   lmsBack:      The lms values of the background%% HISTORY:% % 98/11/05 bob: added default background settings% 11/18/98 wap: swapped location of background settings in argument list.%				rotated date convention to the left :-).% 2010.04.02 RFD: allow an rgb2lms matrix in place of diaplay & sensors%% 2011.03 HH:  modified findMaxConeScale to expand color and primary dimention%% % C) Vista Lab, HH 2012 %% set paramsnumSensor = size(sensors,2);try    numDisSpec = size(display.spectra, 2);catch    numDisSpec = size(display, 2);endif ~exist('backRYGCBM','var')	backRYGCBM.dir = [1 1 1 1 1 1]';	backRYGCBM.scale = .5;endif(~isstruct(display) && numel(display)== numSensor * numDisSpec)    % then display is a mxn rygcbm2lmsrm matrix.    rygcbm2lmsrm = display;else       rygcbm2lmsrm = sensors'*display.spectra;endadditionalbackLMSRm = sensors'* backgroundSPD;lmsrmBack = rygcbm2lmsrm*(backRYGCBM.dir*backRYGCBM.scale);addlmsrmBack = lmsrmBack + additionalbackLMSRm;lmsrmContrast = zeros(size(sensors, 2),length(stimRYGCBM.scale));for ii=1:length(stimRYGCBM.scale)  lmsStimPlusBack = ...    rygcbm2lmsrm*(stimRYGCBM.maxScale*stimRYGCBM.dir + backRYGCBM.dir*backRYGCBM.scale)...     + additionalbackLMSRm;  lmsrmContrast(:,ii) = (lmsStimPlusBack - addlmsrmBack) ./ addlmsrmBack;endreturn